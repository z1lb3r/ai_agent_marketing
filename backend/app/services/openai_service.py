# backend/app/services/openai_service.py
from openai import AsyncOpenAI
from typing import List, Dict, Any, Optional
import json
import logging
import asyncio
from ..core.config import settings

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not settings.OPENAI_API_KEY:
            logger.error("‚ùå OPENAI_API_KEY not configured!")
            raise ValueError("OPENAI_API_KEY must be set in environment variables")
        
        if not settings.OPENAI_API_KEY.startswith('sk-'):
            logger.error("‚ùå Invalid OPENAI_API_KEY format!")
            raise ValueError("OPENAI_API_KEY must start with 'sk-'")
        
        logger.info("‚úÖ OpenAI service initialized")
        self.client = AsyncOpenAI(
            api_key=settings.OPENAI_API_KEY,
            timeout=45.0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )
    
    async def analyze_moderator_performance(
        self,
        messages: List[Dict[str, Any]],
        prompt: str,
        moderators: List[str] = None,
        group_name: str = "Unknown"
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
            prompt: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            moderators: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        """
        try:
            logger.info(f"ü§ñ Starting moderator analysis for group: {group_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not messages:
                logger.warning("‚ùå No messages provided for analysis")
                return self._get_moderator_fallback_result()
            
            if not prompt or not prompt.strip():
                logger.warning("‚ùå No prompt provided for analysis")
                return self._get_moderator_fallback_result()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_data = self._prepare_moderator_analysis_data(messages, moderators)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self._build_moderator_system_prompt()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            user_prompt = self._build_moderator_user_prompt(
                analysis_data, prompt, group_name, moderators
            )
            
            logger.info("üì§ Sending request to OpenAI...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = await asyncio.wait_for(
                self.client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=2000
                ),
                timeout=45.0
            )
            
            logger.info("‚úÖ Received response from OpenAI")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = self._parse_moderator_response(response.choices[0].message.content)
            
            logger.info("‚úÖ Moderator analysis completed successfully")
            return result
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ OpenAI request timed out for moderator analysis")
            return self._get_moderator_fallback_result()
        except Exception as e:
            logger.error(f"üí• Error in moderator analysis: {str(e)}")
            return self._get_moderator_fallback_result()

    async def analyze_community_sentiment(
        self,
        messages: List[Dict[str, Any]],
        prompt: str = None,
        group_name: str = "Unknown"
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∂–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–±–ª–µ–º –ñ–ö–•
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
            prompt: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
        try:
            logger.info(f"üè† Starting community sentiment analysis for group: {group_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not messages:
                logger.warning("‚ùå No messages provided for community analysis")
                return self._get_community_fallback_result()
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∏—Ç–µ–ª–µ–π –ñ–ö–•
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–∞—Ö –∏ —Ä–∞–π–æ–Ω–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è:
            
1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã
2. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —Å–ª—É–∂–±  
3. –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º
5. –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã (–ø–æ–¥—ä–µ–∑–¥—ã, –¥–≤–æ—Ä—ã, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "sentiment_summary": {
        "overall_mood": "–Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã|–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ|–¥–æ–≤–æ–ª—å–Ω—ã",
        "satisfaction_score": number (0-100),
        "complaint_level": "–Ω–∏–∑–∫–∏–π|—Å—Ä–µ–¥–Ω–∏–π|–≤—ã—Å–æ–∫–∏–π"
    },
    "main_issues": [
        {"category": "–ñ–ö–•|–î–≤–æ—Ä|–ü–æ–¥—ä–µ–∑–¥|–ü–∞—Ä–∫–æ–≤–∫–∞|–®—É–º|–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "issue": "–æ–ø–∏—Å–∞–Ω–∏–µ", "frequency": number}
    ],
    "service_quality": {
        "—É–ø—Ä–∞–≤–ª—è—é—â–∞—è_–∫–æ–º–ø–∞–Ω–∏—è": number (0-100),
        "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ_—Å–ª—É–∂–±—ã": number (0-100), 
        "—É–±–æ—Ä–∫–∞": number (0-100),
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": number (0-100)
    },
    "improvement_suggestions": [string],
    "key_topics": [string],
    "urgent_issues": [string]
}"""
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            message_texts = []
            for msg in messages[:100]:  # –ú–∞–∫—Å–∏–º—É–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                if msg.get('text') and len(msg['text'].strip()) > 5:
                    message_texts.append({
                        'text': msg['text'][:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        'date': msg.get('date', '')
                    })
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            if not prompt or not prompt.strip():
                prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π –∏ –≤—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ"
                
            user_prompt = f"""
–ì–†–£–ü–ü–ê: {group_name}
–ó–ê–î–ê–ß–ê: {prompt}

–°–û–û–ë–©–ï–ù–ò–Ø –ñ–ò–¢–ï–õ–ï–ô ({len(message_texts)} —à—Ç.):
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            for i, msg in enumerate(message_texts[:30]):
                user_prompt += f"\n{i+1}. [{msg['date']}] {msg['text']}"
            
            if len(message_texts) > 30:
                user_prompt += f"\n... –∏ –µ—â–µ {len(message_texts) - 30} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            user_prompt += "\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–æ–±–ª–µ–º—ã –∂–∏—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
            
            logger.info("üì§ Sending community analysis request to OpenAI...")
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = await asyncio.wait_for(
                self.client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=2000
                ),
                timeout=45.0
            )
            
            logger.info("‚úÖ Received community analysis response from OpenAI")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = self._parse_community_response(response.choices[0].message.content)
            
            logger.info("‚úÖ Community sentiment analysis completed successfully")
            return result
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ OpenAI request timed out for community analysis")
            return self._get_community_fallback_result()
        except Exception as e:
            logger.error(f"üí• Error in community sentiment analysis: {str(e)}")
            return self._get_community_fallback_result()

    def _prepare_moderator_analysis_data(
        self, 
        messages: List[Dict[str, Any]], 
        moderators: List[str] = None
    ) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        structured_messages = []
        moderator_messages = []
        
        for msg in messages:
            if msg.get('text') and len(msg['text'].strip()) > 3:
                structured_msg = {
                    'id': msg.get('message_id', ''),
                    'text': msg['text'][:300],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    'date': msg.get('date', ''),
                    'sender_id': msg.get('sender_id', ''),
                    'is_reply': msg.get('is_reply', False)
                }
                structured_messages.append(structured_msg)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
                if moderators and msg.get('sender_id') in moderators:
                    moderator_messages.append(structured_msg)
        
        return {
            'all_messages': structured_messages[:50],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'moderator_messages': moderator_messages[:20],
            'total_messages': len(structured_messages),
            'moderator_count': len(moderator_messages)
        }

    def _build_moderator_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –æ–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. –ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
3. –¢–æ–Ω –æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π)
4. –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º
5. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "summary": {
        "sentiment_score": number (0-100),
        "response_time_avg": number (–º–∏–Ω—É—Ç—ã),
        "resolved_issues": number,
        "satisfaction_score": number (0-100),
        "engagement_rate": number (0-100)
    },
    "moderator_metrics": {
        "response_time": {"avg": number, "min": number, "max": number},
        "sentiment": {"positive": number, "neutral": number, "negative": number},
        "performance": {"effectiveness": number, "helpfulness": number, "clarity": number}
    },
    "key_topics": [string],
    "recommendations": [string]
}"""

    def _build_moderator_user_prompt(
        self, 
        data: Dict[str, Any], 
        prompt: str, 
        group_name: str, 
        moderators: List[str] = None
    ) -> str:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        
        user_prompt = f"""
–ì–†–£–ü–ü–ê: {group_name}
–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò: {prompt}
–ú–û–î–ï–†–ê–¢–û–†–´: {', '.join(moderators) if moderators else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['total_messages']}
- –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {data['moderator_count']}

–ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        for i, msg in enumerate(data['all_messages'][:20]):
            msg_type = "üìã –ú–û–î–ï–†–ê–¢–û–†" if msg['sender_id'] in (moderators or []) else "üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨"
            user_prompt += f"\n{i+1}. {msg_type} [{msg['date']}]: {msg['text']}"
        
        user_prompt += f"\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
        
        return user_prompt

    def _parse_moderator_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx != 0:
                json_str = response_text[start_idx:end_idx]
                result = json.loads(json_str)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if self._validate_moderator_structure(result):
                    logger.info("‚úÖ Successfully parsed moderator analysis response")
                    return result
            
            logger.warning("‚ö†Ô∏è Failed to parse moderator analysis response, using fallback")
            return self._get_moderator_fallback_result()
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå JSON decode error in moderator analysis response: {e}")
            return self._get_moderator_fallback_result()
        except Exception as e:
            logger.error(f"‚ùå Error parsing moderator analysis response: {e}")
            return self._get_moderator_fallback_result()

    def _parse_community_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx != 0:
                json_str = response_text[start_idx:end_idx]
                result = json.loads(json_str)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
                if self._validate_community_structure(result):
                    logger.info("‚úÖ Successfully parsed community analysis response")
                    return result
            
            logger.warning("‚ö†Ô∏è Failed to parse community analysis response, using fallback")
            return self._get_community_fallback_result()
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå JSON decode error in community analysis response: {e}")
            return self._get_community_fallback_result()
        except Exception as e:
            logger.error(f"‚ùå Error parsing community analysis response: {e}")
            return self._get_community_fallback_result()

    def _validate_moderator_structure(self, result: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            required_keys = ['summary', 'moderator_metrics', 'key_topics', 'recommendations']
            
            if not all(key in result for key in required_keys):
                logger.warning(f"‚ùå Missing required keys in moderator analysis. Expected: {required_keys}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary
            summary = result.get('summary', {})
            summary_required = ['sentiment_score', 'response_time_avg', 'resolved_issues', 'satisfaction_score']
            if not all(key in summary for key in summary_required):
                logger.warning(f"‚ùå Invalid summary structure in moderator analysis")
                return False
            
            logger.info("‚úÖ Moderator analysis result structure is valid")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error validating moderator analysis structure: {e}")
            return False

    def _validate_community_structure(self, result: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
            required_keys = ['sentiment_summary', 'main_issues', 'service_quality', 'improvement_suggestions', 'key_topics', 'urgent_issues']
            
            if not all(key in result for key in required_keys):
                logger.warning(f"‚ùå Missing required keys in community analysis. Expected: {required_keys}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É sentiment_summary
            sentiment_summary = result.get('sentiment_summary', {})
            sentiment_required = ['overall_mood', 'satisfaction_score', 'complaint_level']
            if not all(key in sentiment_summary for key in sentiment_required):
                logger.warning(f"‚ùå Invalid sentiment_summary structure")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ main_issues —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(result.get('main_issues', []), list):
                logger.warning("‚ùå main_issues should be a list")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É service_quality
            service_quality = result.get('service_quality', {})
            if not isinstance(service_quality, dict):
                logger.warning("‚ùå service_quality should be a dictionary")
                return False
            
            logger.info("‚úÖ Community analysis result structure is valid")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error validating community analysis structure: {e}")
            return False

    def _get_moderator_fallback_result(self) -> Dict[str, Any]:
        """Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        return {
            "summary": {
                "sentiment_score": 75,
                "response_time_avg": 5.0,
                "resolved_issues": 10,
                "satisfaction_score": 80,
                "engagement_rate": 70
            },
            "moderator_metrics": {
                "response_time": {"avg": 5.0, "min": 1.0, "max": 15.0},
                "sentiment": {"positive": 60, "neutral": 30, "negative": 10},
                "performance": {"effectiveness": 75, "helpfulness": 80, "clarity": 70}
            },
            "key_topics": ["support", "general discussion", "questions"],
            "recommendations": [
                "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∂–µ",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API"
            ]
        }

    def _get_community_fallback_result(self) -> Dict[str, Any]:
        """Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        return {
            "sentiment_summary": {
                "overall_mood": "–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "satisfaction_score": 0,
                "complaint_level": "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            },
            "main_issues": [
                {"category": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "issue": "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "frequency": 1}
            ],
            "service_quality": {
                "—É–ø—Ä–∞–≤–ª—è—é—â–∞—è_–∫–æ–º–ø–∞–Ω–∏—è": 0,
                "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ_—Å–ª—É–∂–±—ã": 0,
                "—É–±–æ—Ä–∫–∞": 0,
                "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": 0
            },
            "improvement_suggestions": [
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∂–µ",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API",
                "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            ],
            "key_topics": ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞"],
            "urgent_issues": ["–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]
        }

    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
        try:
            logger.info("üß™ Testing OpenAI API connection...")
            
            response = await asyncio.wait_for(
                self.client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": "Test connection. Reply with 'OK'."}],
                    max_tokens=10
                ),
                timeout=30.0
            )
            
            logger.info("‚úÖ OpenAI API connection test successful")
            return {
                "status": "success",
                "message": "OpenAI API connected successfully",
                "response": response.choices[0].message.content
            }
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ OpenAI API connection test timed out")
            return {
                "status": "timeout",
                "message": "OpenAI API connection timed out"
            }
        except Exception as e:
            logger.error(f"‚ùå OpenAI API connection test failed: {str(e)}")
            return {
                "status": "error", 
                "message": f"OpenAI API connection failed: {str(e)}"
            }